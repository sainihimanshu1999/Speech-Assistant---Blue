from PyObjCTools.TestSupport import *

import Security


class Testx509defs(TestCase):
    def test_unsuppported(self):
        self.assertFalse(hasattr(Security, "BER_TAG_UNKNOWN"))
        self.assertFalse(hasattr(Security, "BER_TAG_BOOLEAN"))
        self.assertFalse(hasattr(Security, "BER_TAG_INTEGER"))
        self.assertFalse(hasattr(Security, "BER_TAG_BIT_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_OCTET_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_NULL"))
        self.assertFalse(hasattr(Security, "BER_TAG_OID"))
        self.assertFalse(hasattr(Security, "BER_TAG_OBJECT_DESCRIPTOR"))
        self.assertFalse(hasattr(Security, "BER_TAG_EXTERNAL"))
        self.assertFalse(hasattr(Security, "BER_TAG_REAL"))
        self.assertFalse(hasattr(Security, "BER_TAG_ENUMERATED"))
        self.assertFalse(hasattr(Security, "BER_TAG_PKIX_UTF8_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_SEQUENCE"))
        self.assertFalse(hasattr(Security, "BER_TAG_SET"))
        self.assertFalse(hasattr(Security, "BER_TAG_NUMERIC_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_PRINTABLE_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_T61_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_TELETEX_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_VIDEOTEX_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_IA5_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_UTC_TIME"))
        self.assertFalse(hasattr(Security, "BER_TAG_GENERALIZED_TIME"))
        self.assertFalse(hasattr(Security, "BER_TAG_GRAPHIC_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_ISO646_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_GENERAL_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_VISIBLE_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_PKIX_UNIVERSAL_STRING"))
        self.assertFalse(hasattr(Security, "BER_TAG_PKIX_BMP_STRING"))
        self.assertFalse(hasattr(Security, "CSSM_X509_ALGORITHM_IDENTIFIER"))
        self.assertFalse(hasattr(Security, "CSSM_X509_TYPE_VALUE_PAIR"))
        self.assertFalse(hasattr(Security, "CSSM_X509_RDN"))
        self.assertFalse(hasattr(Security, "CSSM_X509_NAME"))
        self.assertFalse(hasattr(Security, "CSSM_X509_SUBJECT_PUBLIC_KEY_INFO"))
        self.assertFalse(hasattr(Security, "CSSM_X509_TIME"))
        self.assertFalse(hasattr(Security, "CSSM_X509_VALIDITY"))
        self.assertFalse(hasattr(Security, "CSSM_X509_OPTION_PRESENT"))
        self.assertFalse(hasattr(Security, "CSSM_X509_OPTION_NOT_PRESENT"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_BASICCONSTRAINTS"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_DATA_FORMAT;"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_TAGandVALUE"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_PAIR"))
        self.assertFalse(hasattr(Security, "CSSM_X509_EXTENSION"))
        self.assertFalse(hasattr(Security, "CSSM_X509_EXTENSIONS"))
        self.assertFalse(hasattr(Security, "CSSM_X509_TBS_CERTIFICATE"))
        self.assertFalse(hasattr(Security, "CSSM_X509_SIGNATURE"))
        self.assertFalse(hasattr(Security, "CSSM_X509_SIGNED_CERTIFICATE"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_POLICYQUALIFIERINFO"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_POLICYQUALIFIERS"))
        self.assertFalse(hasattr(Security, "CSSM_X509EXT_POLICYINFO"))
        self.assertFalse(hasattr(Security, "CSSM_X509_REVOKED_CERT_ENTRY"))
        self.assertFalse(hasattr(Security, "CSSM_X509_REVOKED_CERT_LIST"))
        self.assertFalse(hasattr(Security, "CSSM_X509_TBS_CERTLIST"))
        self.assertFalse(hasattr(Security, "CSSM_X509_SIGNED_CRL"))


if __name__ == "__main__":
    main()
